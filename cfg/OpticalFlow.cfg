#!/usr/bin/env python
PACKAGE = "iarc7_vision"

from dynamic_reconfigure.parameter_generator_catkin import *
import math

gen = ParameterGenerator()

gen.add("fov", double_t, 0, "Field of View of Camera", 1.0, 0, 3)
gen.add("min_estimation_altitude", double_t, 0,
        "Minimum altitude to estimation velocity", 1.0, 0, 3)
gen.add("camera_vertical_threshold", double_t, 0,
        "Maximum angle between camera forward vector and down vector"
        " required for optical flow to run", 0.3, 0, math.pi / 2)
gen.add("points", int_t, 0, "Number of points to track", 400, 0, 6000)
gen.add("quality_level", double_t, 0, "Quality level to accept corners", 0.01,
        0, 1)
gen.add("min_dist", int_t, 0, "Min distance between points", 100, 0, 200)
gen.add("win_size", int_t, 0, "Window size to use for flow", 20, 0, 200)
gen.add("max_level", int_t, 0, "Level for optical flow", 3, 0, 7)
gen.add("iters", int_t, 0, "Iterations for optical flow", 10, 0, 200)
gen.add("scale_factor", double_t, 0, "Factor to scale input image by", 0.5, 0,
        1.0)
gen.add("variance", double_t, 0, "Variance for velocity measurements", 0.0, 0,
        1.0)
gen.add("variance_scale", double_t, 0,
        "Variance scale for velocity measurements", 0.0, 0, 100.0)
gen.add("x_cutoff_region_velocity_measurement", double_t, 0,
        "Cutoff area when deciding which velocities to use", 0.0, 0.0, 1.0)
gen.add("y_cutoff_region_velocity_measurement", double_t, 0,
        "Cutoff area when deciding which velocities to use", 0.0, 0.0, 1.0)
gen.add("debug_frameskip", int_t, 0,
        "Frames to skip before publishing debug images", 0, 0, 15)
gen.add("tf_timeout", double_t, 0,
        "Timeout for updating tf in OpticalFlowEstimator", 0.3, 0, 1.0)
gen.add("max_rotational_vel", double_t, 0,
        "Max rotational velocity allowed for flow to run", 0.3, 0.0, 3.0)

flow_filter_enum = gen.enum([
    gen.const("average", str_t, "average", "Flow filter average"),
    gen.const("median", str_t, "median", "Flow filter median"),
    gen.const("statistical", str_t, "statistical", "Flow filter statistical")
], "Flow filter type")

gen.add(
    "vector_filter",
    str_t,
    0,
    "Vector filter type",
    "statistical",
    edit_method=flow_filter_enum)

gen.add("min_vectors", int_t, 0,
        "Mininum number of vectors to compute flow with", 100, 0, 1000)
gen.add("max_filtered_variance", double_t, 0,
        "Maximum variance of the vector sample", 10.0, 0.0, 1000.0)
gen.add("max_normalized_element_variance", double_t, 0,
        "Maximum normalized variance of an element to be included in average",
        10.0, 0.0, 1000.0)
gen.add("hist_scale_factor", double_t, 0,
        "Scaling factor used to scale the debugging histogram features", 300.0,
        0.0, 1000.0)
gen.add("hist_image_size_scale", double_t, 0,
        "Scaling factor used to scale the debugging histogram image", 3.0, 0.0,
        10.0)

exit(gen.generate(PACKAGE, "iarc7_vision", "OpticalFlow"))
