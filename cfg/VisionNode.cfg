#!/usr/bin/env python
PACKAGE = "iarc7_vision"

from dynamic_reconfigure.parameter_generator_catkin import *
import math

gen = ParameterGenerator()

# Line Detector Settings
gen.add("pixels_per_meter", int_t, 0, "Pixels per meter for image scale", 250, 0, 1000)
gen.add("canny_high_threshold", double_t, 0, "Canny High Threshold", 20000, 0, 65535)
gen.add("canny_threshold_ratio", double_t, 0, "Canny Low Threshold Divisor", 3.5, 0, 200)
gen.add("hough_rho_resolution", double_t, 0, "Hough Rho Resolution", .4, 0, 10)
gen.add("hough_theta_resolution", double_t, 0, "Hough Theta Resolution", .0087, 0, 0.5)
gen.add("hough_thresh_fraction", double_t, 0, "Hough Thresh Fraction", .18, 0, 1.5)
gen.add("fov", double_t, 0, "Field of View of Camera", 1.0, 0, 3)

size_enum = gen.enum([gen.const("Three", int_t, 3, "Canny Sobel 3"),
                      gen.const("Five", int_t, 5, "Canny Sobel 5"),
                      gen.const("Seven", int_t, 7, "Canny Sobel 7")],
                     "Canny Sobel Size")

gen.add("canny_sobel_size", int_t, 0, "Canny Sobel Size", 7, 3, 7, edit_method=size_enum)

# Flow Settings
gen.add("flow_fov", double_t, 0, "Field of View of Camera", 1.0, 0, 3)
gen.add("flow_min_estimation_altitude", double_t, 0, "Minimum altitude to estimation velocity", 1.0, 0, 3)
gen.add("flow_camera_vertical_threshold", double_t, 0,
        "Maximum angle between camera forward vector and down vector"
        " required for optical flow to run", 0.3, 0, math.pi/2)
gen.add("flow_points", int_t, 0, "Number of points to track", 400, 0, 6000)
gen.add("flow_quality_level", double_t, 0, "Quality level to accept corners", 0.01, 0, 1)
gen.add("flow_min_dist", int_t, 0, "Min distance between points", 100, 0, 200)
gen.add("flow_win_size", int_t, 0, "Window size to use for flow", 20, 0, 200)
gen.add("flow_max_level", int_t, 0, "Level for optical flow", 3, 0, 7)
gen.add("flow_iters", int_t, 0, "Iterations for optical flow", 10, 0, 200)
gen.add("flow_scale_factor", double_t, 0, "Factor to scale input image by", 0.5, 0, 1.0)
gen.add("flow_variance", double_t, 0, "Variance for velocity measurements", 0.0, 0, 1.0)
gen.add("flow_variance_scale", double_t, 0, "Variance scale for velocity measurements", 0.0, 0, 100.0)
gen.add("flow_x_cutoff_region_velocity_measurement", double_t, 0, "Cutoff area when deciding which velocities to use", 0.0, 0.2, 1.0)
gen.add("flow_y_cutoff_region_velocity_measurement", double_t, 0, "Cutoff area when deciding which velocities to use", 0.0, 0.2, 1.0)
gen.add("flow_debug_frameskip", int_t, 0, "Frames to skip before publishing debug images", 0, 0, 15)
gen.add("flow_tf_timeout", double_t, 0, "Timeout for updating tf in OpticalFlowEstimator", 0.3, 0, 1.0)
gen.add("flow_max_rotational_vel", double_t, 0, "Max rotational velocity allowed for flow to run", 0.3, 0.0, 3.0)
gen.add("flow_min_vectors", int_t, 0, "Mininum number of vectors to compute flow with", 100, 0, 1000)
gen.add("flow_max_sample_variance", double_t, 0, "Maximum variance of the vector sample", 10.0, 0.0, 1000.0)
gen.add("flow_max_normalized_element_variance", double_t, 0, "Maximum normalized variance of an element to be included in average", 10.0, 0.0, 1000.0)

exit(gen.generate(PACKAGE, "iarc7_vision", "VisionNode"))
